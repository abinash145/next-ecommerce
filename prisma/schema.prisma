// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  name     String?
  email    String @unique
  password String
  posts    Post[]
  orders    Order[]
  designs   Design[]
  createdAt DateTime @default(now())
  gender    Gender?
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id])
}

model Product {
  id          String       @id @default(uuid())
  title       String
  description String
  price       Float
  images      String[]
  variations  Variation[]
  orderItems OrderItem[]
  categories   ProductCategory[] 
  brandId     String?
  brand       Brand?       @relation(fields: [id], references: [id])
  createdAt   DateTime     @default(now())
}
enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

model Variation {
  id        String   @id @default(uuid())
  size      Size
  color     String
  stock     Int
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}


model Category {
  id       String           @id @default(uuid())
  name     String
  products ProductCategory[]
}

model ProductCategory {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}
model Order {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  items     OrderItem[]
  total     Float
  status    String      @default("pending")
  createdAt DateTime    @default(now())
}

model OrderItem {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  quantity  Int
  price     Float
}

model Design {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  designUrl  String   // Link to file (Cloudinary or S3)
  editable   Boolean
  createdAt  DateTime @default(now())
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}
model Brand {
  id        String    @id @default(uuid())
  name      String    @unique
  logoUrl   String?   // Optional brand logo
  products  Product[]
   createdAt  DateTime @default(now())

}